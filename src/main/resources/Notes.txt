spring-boot-starter-web contains:
    - sprint-boot-starter
    - jackson // convert json to object
    - spring-core
    - spring-mvc // mvc architecture
    - spring-boot-starter-tomcat // embedded server

Spring MVC - why? - separation of concerns/layers : reusability : testability : scalability :
    - client -> http request(json/xml) -> controller(object) -> service layer
    -> repository -> model/entity(mapped to database)

Layerd Architecture:
    - presentation layer - controller/authentication
    - business layer - service/validation/authorisation
    - persistence layer - repository/querirs - JPQL/drivers
    - database - db


Project stucture:
    - controller
    - service
    - repository

client -> http/json -> controller -> dto -> service -> Entity -> respository -> db

what happen when you start the server:
    -server start - it goes to all the controller and tell dispatcher servelet to where to map the request


Java/Jakarta Persistence API - JPA
    - db are servers that store data inside secondary memory
    - every dp provide driver that will help us connect with dp with different languages
    - JPA will confire the driver and jdbc
    - what we need:
        - spring data JPA (spring-started-data-jpa)
        - database (h2(db-emulater)-in memory db library/mysql/postgresSql)
        - removing version from pom.xml for h2 dependency as version is already mentioned in spring starter parent pom then spring boot dependencies-->
        - h2 configuration and url will be automatically configured
        -


flow = JPA(JPQL) -> JPA Provider(specification - Hibernate(ORM - object mapping)) -> API JDBC -> DRIVER -> MySQL
- JpaRepository implementation simpleJpaRepository has all the implementation

- server layer bridge between controller and repository (business logic)
- conversion of entity to dto or vice versa should be done inside service
- model mapper (maven repo) will help in conversion of any class to other class

- patch mapping learn about reflection field update
- ResponseEntity to return meaningful http message

Validation and custom Validation:
    - add dependency spring boot starter validation
    - so DTO is the first point of contact so add vaidation in DTO class
    - add annotation @Valid in controller
    - add respective validation annotation like @NotNull, @max, @min etc in fields of DTO
@Valid - validates the associated object recursively (applies bean validation to nested objects)

Custom Annotation Validation:
    - @interface
    - @Retention , @Target, @Constraint(validatedBy = {name of the validator class.class})
    - copy three methods from other existing annotations i.e. message(), groups() and payload()
    - create a validator class which implements ConstraintValidator< here name of the annotation class, type of field>
    - override isValid() method and write the logic in it
